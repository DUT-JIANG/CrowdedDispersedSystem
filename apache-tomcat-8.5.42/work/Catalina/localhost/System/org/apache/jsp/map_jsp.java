/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.42
 * Generated at: 2019-07-18 10:48:55 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import org.model.SchemeMake.PathApi.PathRequest;
import org.model.BaiduMap;
import org.model.settings;
import org.model.SchemeMake.PathApi.PathReturn;
import org.model.SchemeMake.Units.vertex;
import org.model.SchemeMake.Units.edge;
import org.model.SchemeMake.Units.capacity;
import org.model.SchemeMake.PathApi.result.Route;
import org.model.Query;
import java.util.ArrayList;
import java.util.TreeSet;
import java.util.Iterator;

public final class map_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {


			String power;
			String status;
			String subtitle;
		
  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("org.model.SchemeMake.PathApi.PathRequest");
    _jspx_imports_classes.add("org.model.SchemeMake.Units.capacity");
    _jspx_imports_classes.add("java.util.Iterator");
    _jspx_imports_classes.add("org.model.BaiduMap");
    _jspx_imports_classes.add("org.model.SchemeMake.Units.vertex");
    _jspx_imports_classes.add("org.model.settings");
    _jspx_imports_classes.add("org.model.SchemeMake.Units.edge");
    _jspx_imports_classes.add("org.model.Query");
    _jspx_imports_classes.add("org.model.SchemeMake.PathApi.PathReturn");
    _jspx_imports_classes.add("org.model.SchemeMake.PathApi.result.Route");
    _jspx_imports_classes.add("java.util.TreeSet");
    _jspx_imports_classes.add("java.util.ArrayList");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta >\r\n");
      out.write("\t<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\r\n");
      out.write("\t<meta name=\"viewport\" content=\"initial-scale=1.0, user-scalable=no\" />\r\n");
      out.write("\t<style type=\"text/css\">\r\n");
      out.write("\tbody, html,#allmap {width: 100%;height: 100%;overflow: hidden;margin:0;font-family:\"Ã¥Â¾Â®Ã¨Â½Â¯Ã©ÂÂÃ©Â»Â\";}\r\n");
      out.write("\t</style>\r\n");
      out.write("\t<script type=\"text/javascript\" src=\"http://api.map.baidu.com/api?v=2.0&ak=rvgrn6yT8jA11suotGclTuLe9Aj3AivK\"></script>\r\n");
      out.write("\t<title>å°å¾æ¾ç¤º</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\t<div id=\"allmap\"></div>\r\n");
      out.write("</body>\r\n");
      out.write("\r\n");
      out.write("    ");

	String username = null;
	Cookie[] cookies = request.getCookies();
	for (Cookie cookie : cookies) {
		if (cookie.getName().equals("username")) {
			username = cookie.getValue();
		}
	}
	if(username==null){
		out.println("<script>alert('æ²¡ææé ')</script>");
		return;
	}
	
      out.write("\r\n");
      out.write("\t\t");
      out.write("\r\n");
      out.write("\t\t");

			for (Cookie cookie : cookies) {
				if (cookie.getName().equals("power")) {
					power = cookie.getValue();
				}
				if (cookie.getName().equals("status")) {
					status = cookie.getValue();
				}
			}
		
      out.write("\r\n");
      out.write("\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("\t// Ã§ÂÂ¾Ã¥ÂºÂ¦Ã¥ÂÂ°Ã¥ÂÂ¾APIÃ¥ÂÂÃ¨ÂÂ½\r\n");
      out.write("\tvar points=[\r\n");
      out.write("\t\t");

		String project_id = null;
		String Event_id = null;
		project_id = request.getParameter("Project_id");
		Event_id   = request.getParameter("Event_id");
		if(project_id!=null)
		System.out.println("[get project]"+project_id);
		if(Event_id!=null)
		System.out.println("[get eventID]"+Event_id);
		TreeSet<vertex> ts = new TreeSet<vertex>();
		vertex origin=null;
		boolean flg = false;
		if(project_id!=null){
			ArrayList<String[]>ret = new ArrayList<String[]>();
			String sql = "select p_id,x_coordinate,y_coordinate from point where Event_id="+project_id;
			ret  = Query.runSql(3, sql);
			if(ret==null||ret.size()==0){
				System.out.println("[displayer] Wrong request : Event_ID="+project_id);
				out.print("<script>alert(\"wrong parameters\");</script>");
				out.flush();
				return;
			}
			else{
				for(int i=1;i<ret.size();i++){
					String [] tmp = ret.get(i);
					int p_id = Integer.parseInt(tmp[1]);
					double x = Double.parseDouble(tmp[2]);
					double y = Double.parseDouble(tmp[3]);
					vertex v = new vertex(x,y);
					v.setID(p_id);
					ts.add(v);
					if(!flg){
						origin = v ;
						flg = true;
					}
					out.print("new BMap.Point(");
					out.print(v.toString2());
					out.println("),");
				}
			}
		}
		if(Event_id!=null){
			ArrayList<String[]>ret = new ArrayList<String[]>();
			String sql = "select p_id,x_coordinate,y_coordinate from point where Event_id="+Event_id;
			ret  = Query.runSql(3, sql);
			if(ret==null||ret.size()==0){
				System.out.println("[displayer] Wrong request : Event_ID="+Event_id);
			}
			else{
				for(int i=1;i<ret.size();i++){
					String [] tmp = ret.get(i);
					int p_id = Integer.parseInt(tmp[1]);
					double x = Double.parseDouble(tmp[2]);
					double y = Double.parseDouble(tmp[3]);
					vertex v = new vertex(x,y);
					v.setID(p_id);
					ts.add(v);
					if(!flg){
						origin = v ;
						flg = true;
					}
				}
			}
		}
		
		
      out.write("\r\n");
      out.write("\t];\r\n");
      out.write("\tvar map = new BMap.Map(\"allmap\");    // Ã¥ÂÂÃ¥Â»ÂºMapÃ¥Â®ÂÃ¤Â¾Â\r\n");
      out.write("\tmap.centerAndZoom(new BMap.Point(");
if(origin!=null){
		out.print(origin.toString2());
	}
	else{
		out.print(((vertex)ts.iterator().next()).toString2());
	}
      out.write("), 14);  // Ã¥ÂÂÃ¥Â§ÂÃ¥ÂÂÃ¥ÂÂ°Ã¥ÂÂ¾,Ã¨Â®Â¾Ã§Â½Â®Ã¤Â¸Â­Ã¥Â¿ÂÃ§ÂÂ¹Ã¥ÂÂÃ¦Â ÂÃ¥ÂÂÃ¥ÂÂ°Ã¥ÂÂ¾Ã§ÂºÂ§Ã¥ÂÂ«\r\n");
      out.write("\t//Ã¦Â·Â»Ã¥ÂÂ Ã¥ÂÂ°Ã¥ÂÂ¾Ã§Â±Â»Ã¥ÂÂÃ¦ÂÂ§Ã¤Â»Â¶\r\n");
      out.write("\tmap.addControl(new BMap.MapTypeControl({\r\n");
      out.write("\t\tmapTypes:[\r\n");
      out.write("            BMAP_NORMAL_MAP,\r\n");
      out.write("            BMAP_HYBRID_MAP\r\n");
      out.write("        ]}));\t  \r\n");
      out.write("\tmap.setCurrentCity(\"Ã¥Â¤Â§Ã¨Â¿Â\");          // Ã¨Â®Â¾Ã§Â½Â®Ã¥ÂÂ°Ã¥ÂÂ¾Ã¦ÂÂ¾Ã§Â¤ÂºÃ§ÂÂÃ¥ÂÂÃ¥Â¸Â Ã¦Â­Â¤Ã©Â¡Â¹Ã¦ÂÂ¯Ã¥Â¿ÂÃ©Â¡Â»Ã¨Â®Â¾Ã§Â½Â®Ã§ÂÂ\r\n");
      out.write("\tmap.enableScrollWheelZoom(true);     //Ã¥Â¼ÂÃ¥ÂÂ¯Ã©Â¼Â Ã¦Â ÂÃ¦Â»ÂÃ¨Â½Â®Ã§Â¼Â©Ã¦ÂÂ¾\r\n");
      out.write("    var plPoints = [\r\n");
      out.write("    \t");

		System.out.println(project_id);
		if(project_id!=null){
			ArrayList<String[]>ret = new ArrayList<String[]>();
			String sql = "select e_id,id1,id2,capacity from capacity where Event_id="+project_id;
			ret  = Query.runSql(4, sql);
			if(ret==null||ret.size()==0){
				System.out.println("[displayer] Wrong request : Event_ID="+project_id);
			}
			else{
				for(int i=1;i<ret.size();i++){
					String [] tmp = ret.get(i);
					int e_id = Integer.parseInt(tmp[1]);
					int id1 = Integer.parseInt(tmp[2]);
					int id2 = Integer.parseInt(tmp[3]);
					int capacity = Integer.parseInt(tmp[4]);
					capacity c = new capacity(e_id,id1,id2,capacity);
					
					vertex src=null;
					vertex dst=null;
					
					Iterator iter = ts.iterator();
					while(iter.hasNext()){
						vertex v = (vertex)iter.next();
						if(v.getID()==c.id1){
							src = v;
						}
						else if(v.getID()==c.id2){
							dst = v;
						}
					}
					if(src==null||dst==null){
						continue;
					}
					edge e = new edge(src,dst,capacity);
					out.print("{weight:"+"5"+",color:\"blue\",opacity:0.6,points:[");
					out.print("\""+e.getSrc().toString2()+"\",\""+e.getDst().toString2()+"\"");
					out.print("]},");
					out.println();
				}
			}
		}
		if(Event_id!=null){
			ArrayList<String[]>ret = new ArrayList<String[]>();
			String sql = "select e_id,id1,id2,capacity from  (SELECT p.e_id,c.id1,c.id2,p.event_id,capacity FROM path p,capacity c WHERE p.e_id=c.e_id) as tab where event_id="+Event_id;
			ret  = Query.runSql(4, sql);
			if(ret==null||ret.size()==0){
				System.out.println("[displayer] Wrong request : Event_ID="+Event_id);
			}
			else{
				for(int i=0;i<ret.size();i++){
					String [] tmp = ret.get(i);
					int e_id = Integer.parseInt(tmp[1]);
					int id1 = Integer.parseInt(tmp[2]);
					int id2 = Integer.parseInt(tmp[3]);
					int capacity = Integer.parseInt(tmp[4]);
					capacity c = new capacity(e_id,id1,id2,capacity);
					
					vertex src=null;
					vertex dst=null;
					
					Iterator iter = ts.iterator();
					while(iter.hasNext()){
						vertex v = (vertex)iter.next();
						if(v.getID()==c.id1){
							src = v;
						}
						else if(v.getID()==c.id2){
							dst = v;
						}
					}
					if(src==null||dst==null){
						continue;
					}
					edge e = new edge(src,dst,capacity);
					edge [] es = e.getTrajectory();

					for(int i1=0;i1<es.length;i1++){
						out.print("{weight:"+"5"+",color:\"blue\",opacity:1,points:[");
						out.print("\""+es[i1].getSrc().toString2()+"\",\""+es[i1].getDst().toString2()+"\"");
						out.print("]},");
						out.println();
					}

				}
			}
		}
		
      out.write("\r\n");
      out.write("    \t\r\n");
      out.write("    \t\r\n");
      out.write("    ];\r\n");
      out.write("    //Ã¥ÂÂÃ¥ÂÂ°Ã¥ÂÂ¾Ã¤Â¸Â­Ã¦Â·Â»Ã¥ÂÂ Ã§ÂºÂ¿Ã¥ÂÂ½Ã¦ÂÂ°\r\n");
      out.write("    function addPolyline(){\r\n");
      out.write("        for(var i=0;i<plPoints.length;i++){\r\n");
      out.write("            var json = plPoints[i];\r\n");
      out.write("            var points = [];\r\n");
      out.write("            for(var j=0;j<json.points.length;j++){\r\n");
      out.write("                var p1 = json.points[j].split(\",\")[0];\r\n");
      out.write("                var p2 = json.points[j].split(\",\")[1];\r\n");
      out.write("                points.push(new BMap.Point(p1,p2));\r\n");
      out.write("            }\r\n");
      out.write("            var line = new BMap.Polyline(points,{strokeWeight:json.weight,strokeColor:json.color,strokeOpacity:json.opacity});\r\n");
      out.write("            map.addOverlay(line);\r\n");
      out.write(" \r\n");
      out.write("        }\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    \r\n");
      out.write("    points.forEach(function(value) {  \r\n");
      out.write("    \tvar locMarkers;\r\n");
      out.write("    \tlocMarkers = new BMap.Marker(value);\r\n");
      out.write("     \r\n");
      out.write("    \tmap.addOverlay(locMarkers);\t\t//Ã¥Â°ÂÃ¦Â ÂÃ¦Â³Â¨Ã¦Â·Â»Ã¥ÂÂ Ã¥ÂÂ°Ã¥ÂÂ°Ã¥ÂÂ¾Ã¤Â¸Â­\r\n");
      out.write("    \t\r\n");
      out.write("    \tlocMarkers.disableMassClear();\t//Ã¨Â®Â¾Ã§Â½Â®markerÃ¤Â¸ÂÃ¥ÂÂ¯Ã¨Â¢Â«Ã¦Â¸ÂÃ©ÂÂ¤\r\n");
      out.write("    \t\r\n");
      out.write("    \t;  \r\n");
      out.write("    });\r\n");
      out.write("    addPolyline();\r\n");
      out.write("\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
