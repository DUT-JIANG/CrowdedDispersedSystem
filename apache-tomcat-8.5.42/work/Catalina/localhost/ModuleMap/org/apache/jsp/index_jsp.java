/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.42
 * Generated at: 2019-07-11 09:59:39 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import org.model.SchemeMake.PathApi.PathRequest;
import org.model.Map;
import org.model.SchemeMake.PathApi.settings;
import org.model.SchemeMake.PathApi.PathReturn;
import org.model.SchemeMake.Units.point;
import org.model.SchemeMake.PathApi.result.Route;
import java.util.ArrayList;

public final class index_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("org.model.SchemeMake.PathApi.settings");
    _jspx_imports_classes.add("org.model.SchemeMake.Units.point");
    _jspx_imports_classes.add("org.model.SchemeMake.PathApi.PathRequest");
    _jspx_imports_classes.add("org.model.Map");
    _jspx_imports_classes.add("org.model.SchemeMake.PathApi.PathReturn");
    _jspx_imports_classes.add("org.model.SchemeMake.PathApi.result.Route");
    _jspx_imports_classes.add("java.util.ArrayList");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta >\r\n");
      out.write("\t<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\r\n");
      out.write("\t<meta name=\"viewport\" content=\"initial-scale=1.0, user-scalable=no\" />\r\n");
      out.write("\t<style type=\"text/css\">\r\n");
      out.write("\tbody, html,#allmap {width: 100%;height: 100%;overflow: hidden;margin:0;font-family:\"å¾®è½¯éé»\";}\r\n");
      out.write("\t</style>\r\n");
      out.write("\t<script type=\"text/javascript\" src=\"http://api.map.baidu.com/api?v=2.0&ak=rvgrn6yT8jA11suotGclTuLe9Aj3AivK\"></script>\r\n");
      out.write("\t<title>å°å¾å±ç¤º</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\t<div id=\"allmap\"></div>\r\n");
      out.write("</body>\r\n");
      out.write("\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("\t// ç¾åº¦å°å¾APIåè½\r\n");
      out.write("\tvar points=[\r\n");
      out.write("\t\t");

		
		float x1 = (float)39.084105;
		float y1 = (float)121.817608;
		float x2 = (float)39.057184;
		float y2 = (float)121.781387;
		
		point src=new point(x1,y1);
		point dst=new point(x2,y2);
		point [] ans = Map.getAllJunction(src,dst);
		for (point p : ans){
			out.print("new BMap.Point(");
			out.print(p.toString2());
			out.println("),");
		}
		
		
      out.write("\r\n");
      out.write("\t];\r\n");
      out.write("\tvar map = new BMap.Map(\"allmap\");    // åå»ºMapå®ä¾\r\n");
      out.write("\tmap.centerAndZoom(new BMap.Point(121.817608, 39.084105), 11);  // åå§åå°å¾,è®¾ç½®ä¸­å¿ç¹åæ åå°å¾çº§å«\r\n");
      out.write("\t//æ·»å å°å¾ç±»åæ§ä»¶\r\n");
      out.write("\tmap.addControl(new BMap.MapTypeControl({\r\n");
      out.write("\t\tmapTypes:[\r\n");
      out.write("            BMAP_NORMAL_MAP,\r\n");
      out.write("            BMAP_HYBRID_MAP\r\n");
      out.write("        ]}));\t  \r\n");
      out.write("\tmap.setCurrentCity(\"å¤§è¿\");          // è®¾ç½®å°å¾æ¾ç¤ºçåå¸ æ­¤é¡¹æ¯å¿é¡»è®¾ç½®ç\r\n");
      out.write("\tmap.enableScrollWheelZoom(true);     //å¼å¯é¼ æ æ»è½®ç¼©æ¾\r\n");
      out.write("    var plPoints = [{weight:2,color:\"blue\",opacity:0.6,points:[\"121.820719,39.087036\",\"122.25734,29.735576\",\"122.26043,29.731436\",\"122.256262,29.728614\",\"122.257418,29.7253407\",\"122.257783,29.722075\",\"122.2649623,29.720381\"]}\r\n");
      out.write("    ];\r\n");
      out.write("    //åå°å¾ä¸­æ·»å çº¿å½æ°\r\n");
      out.write("    function addPolyline(){\r\n");
      out.write("        for(var i=0;i<plPoints.length;i++){\r\n");
      out.write("            var json = plPoints[i];\r\n");
      out.write("            var points = [];\r\n");
      out.write("            for(var j=0;j<json.points.length;j++){\r\n");
      out.write("                var p1 = json.points[j].split(\",\")[0];\r\n");
      out.write("                var p2 = json.points[j].split(\",\")[1];\r\n");
      out.write("                points.push(new BMap.Point(p1,p2));\r\n");
      out.write("            }\r\n");
      out.write("            var line = new BMap.Polyline(points,{strokeWeight:json.weight,strokeColor:json.color,strokeOpacity:json.opacity});\r\n");
      out.write("            map.addOverlay(line);\r\n");
      out.write(" \r\n");
      out.write("        }\r\n");
      out.write("    }\r\n");
      out.write("    points.forEach(function(value) {  \r\n");
      out.write("    \tvar locMarkers;\r\n");
      out.write("    \tlocMarkers = new BMap.Marker(value);\r\n");
      out.write("     \r\n");
      out.write("    \tmap.addOverlay(locMarkers);\t\t//å°æ æ³¨æ·»å å°å°å¾ä¸­\r\n");
      out.write("    \t\r\n");
      out.write("    \tlocMarkers.disableMassClear();\t//è®¾ç½®markerä¸å¯è¢«æ¸é¤\r\n");
      out.write("    \t\r\n");
      out.write("    \t;  \r\n");
      out.write("    });\r\n");
      out.write("\r\n");
      out.write("    addPolyline();\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
